#!/usr/bin/python
# -*- coding: utf-8 -*-
# (c) 2013, Chatham Financial <oss@chathamfinancial.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
DOCUMENTATION = '''
---
module: rabbitmq_plugin
short_description: Adds or removes users to RabbitMQ
description:
  - Enables or disables RabbitMQ plugins
version_added: 1.0
author: Chris Hoffman
options:
  names:
    description:
      - Comma-separated list of plugin names
    required: true
    default: null
    aliases: [name]
  new_only:
    description:
      - Only enable missing plugins
      - Does not disable plugins that are not in the names list
    required: false
    default: no
    choices: [yes, no]
  state:
    description:
      - Specify if pluginss are to be enabled or disabled
    required: false
    default: enabled
    choices: [enabled, disabled]
examples:
  - code: rabbitmq_plugin names=rabbitmq_management state=enabled
    description: Enables the rabbitmq_management plugin
'''

class RabbitMqPlugins(object):
    def __init__(self, module):
        self.module = module

    def _exec(self, args):
        cmd = ["rabbitmq-plugins"]
        rc, out, err = self.module.run_command(cmd + args, check_rc=True)
        return out.splitlines()

    def get_all(self):
        return self._exec(["list", "-E", "-m"])

    def enable(self, name):
        return self._exec(["enable", name])

    def disable(self, name):
        return self._exec(["disable", name])

def main():
    arg_spec = dict(
        names=dict(required=True, aliases=['name']),
        new_only=dict(default='no', choices=BOOLEANS),
        state=dict(default='enabled', choices=['enabled', 'disabled'])
    )
    module = AnsibleModule(argument_spec=arg_spec)

    names = module.params['names'].split(',')
    new_only = module.boolean(module.params['new_only'])
    state = module.params['state']

    rabbitmq_plugins = RabbitMqPlugins(module)
    enabled_plugins = rabbitmq_plugins.get_all()

    enabled = []
    disabled = []
    if state == 'enabled':
        if not new_only:
            for plugin in enabled_plugins:
                if plugin not in names:
                    rabbitmq_plugins.disable(plugin)
                    disabled.append(plugin)

        for name in names:
            if name not in enabled_plugins:
                rabbitmq_plugins.enable(name)
                enabled.append(name)
    else:
        for plugin in enabled_plugins:
            if plugin in names:
                rabbitmq_plugins.disable(plugin)
                disabled.append(plugin)

    changed = len(enabled) > 0 or len(disabled) > 0
    module.exit_json(changed=changed, enabled=enabled, disabled=disabled)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
